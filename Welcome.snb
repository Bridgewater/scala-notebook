{
  "metadata":{
    "name":"Welcome",
    "user_save_timestamp":"2014-09-08T23:30:54.951Z",
    "auto_save_timestamp":"2014-09-12T12:34:01.954Z"
  },
  "worksheets":[{
    "cells":[{
      "cell_type":"markdown",
      "source":"## Welcome to Scala Notebook\n\nScala notebook is an interactive REPL. You type scala expressions in the browser, and they are evaluated in a Kernel behind the scenes. Cells can contain formatting or code."
    },{
      "cell_type":"markdown",
      "source":"To edit a markdown cell, double-click in the text. "
    },{
      "cell_type":"code",
      "input":"import notebook.JsonCodec._\nimport org.json4s.JsonAST._\nimport org.json4s.JsonDSL._\nimport notebook.widgets.d3._\n  \n  val script = {\n\t  implicit val sss = strings\n\t  D3(Seq(\"ok\", \"nok\"), 400, 100, \n         \"\"\" \n\t     function(data) {\n\t\t     var text = svg.selectAll(\"text\")\n                        .data(data)\n                        .enter()\n                        .append(\"text\")\n                        .attr(\"x\", 10)\n                        .attr(\"y\", 10)\n                        .attr(\"fill\", \"red\")\n \t\t\t            .text(function(t) {return t;});\n           \n         }\n         \"\"\", \n         \"\"\" function(x) {console.log(\"yop\"); };\"\"\")\n\n  }",
      "language":"scala",
      "collapsed":false,
      "prompt_number":12,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"script.apply(Seq(\"BOOOM\"))",
      "language":"scala",
      "collapsed":false,
      "prompt_number":13,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"",
      "language":"scala",
      "collapsed":true,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"",
      "language":"scala",
      "collapsed":true,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"",
      "language":"scala",
      "collapsed":true,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"",
      "language":"scala",
      "collapsed":true,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"",
      "language":"scala",
      "collapsed":true,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"// Simple expressions\nList(1,2,3).reverse // show\n ",
      "language":"scala",
      "collapsed":false,
      "prompt_number":2,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"sparkContext",
      "language":"scala",
      "collapsed":false,
      "prompt_number":3,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"val file = sparkContext.textFile(\"hdfs://ec2-54-77-215-229.eu-west-1.compute.amazonaws.com:9000/data/yum.log\")",
      "language":"scala",
      "collapsed":false,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"val rdd = sparkContext.makeRDD(Array(1, 2))",
      "language":"scala",
      "collapsed":false,
      "prompt_number":4,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"rdd.count()\n ",
      "language":"scala",
      "collapsed":false,
      "prompt_number":5,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"case class A(a:String)\nval a:A  = A(\"ok\")",
      "language":"scala",
      "collapsed":false,
      "prompt_number":6,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"val signs = sparkContext.makeRDD(Array(\">\", \"<\"))\nval appendedSigns = signs.map(_ + a.a)\n\n  <div>{appendedSigns.collect() map (s => <p>{s}</p>)}</div>\n  ",
      "language":"scala",
      "collapsed":false,
      "prompt_number":11,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"// Reactive components allow dynamic communication to Scala and Javascript\nval ib = new InputBox(\"\")",
      "language":"scala",
      "collapsed":false,
      "prompt_number":1,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"val ib2 = new InputBox(\"\")",
      "language":"scala",
      "collapsed":false,
      "prompt_number":2,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"// After running this, type text in the second box and it appears in the first\nib.currentValue <-- ib2.currentValue",
      "language":"scala",
      "collapsed":false,
      "prompt_number":5,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"",
      "language":"scala",
      "collapsed":true,
      "outputs":[]
    }]
  }],
  "autosaved":[{
    "cells":[{
      "cell_type":"markdown",
      "source":"## Welcome to Scala Notebook\n\nScala notebook is an interactive REPL. You type scala expressions in the browser, and they are evaluated in a Kernel behind the scenes. Cells can contain formatting or code."
    },{
      "cell_type":"markdown",
      "source":"To edit a markdown cell, double-click in the text. "
    },{
      "cell_type":"code",
      "input":"import notebook.JsonCodec._\nimport org.json4s.JsonAST._\nimport org.json4s.JsonDSL._\nimport notebook.widgets.d3._\n  \n  val script = {\n\t  implicit val sss = strings\n\t  D3(Seq(\"ok\", \"nok\"), 400, 100, \n         \"\"\" \n\t     function(data) {\n\t\t   var text = svg.selectAll(\"text\")\n                        .data(data, function(d) { return d; });\n           text.enter()\n             .append(\"text\")\n             .attr(\"x\", function(d, i) { return (i+1) * 10;})\n             .attr(\"y\", function(d, i) { return (i+1) * 10;})\n             .attr(\"fill\", \"red\")\n             .text(function(t) {return t;});\n           \n           text.exit().remove();\n           \n         }\n         \"\"\", \n         \"\"\" function(x) {console.log(\"yop\"); };\"\"\")\n\n  }",
      "language":"scala",
      "collapsed":false,
      "prompt_number":13,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"script.apply(Seq(\"BOOOM\", \"BUM\", \"BAM\"))",
      "language":"scala",
      "collapsed":false,
      "prompt_number":12,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"import notebook.JsonCodec._\nimport org.json4s.JsonAST._\nimport org.json4s.JsonDSL._\nimport notebook.widgets.d3._\n\n  \nval script = {\n\t  implicit val sss = strings\n\t  D3.svg(Seq(\"ok\", \"nok\"), 400, 100, \n         \"consoleDir\", \n         \"consoleDir\")\n  }\n  ",
      "language":"scala",
      "collapsed":false,
      "prompt_number":2,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"  def ts = (1d to 40 by 1).map{ x => \n                       \t      (x.toDouble, scala.util.Random.nextDouble * 150)\n                            }\n  \t\t\t\t\t        .toSeq\n()\n",
      "language":"scala",
      "collapsed":false,
      "prompt_number":7,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"import notebook.JsonCodec._\nimport org.json4s.JsonAST._\nimport org.json4s.JsonDSL._\nimport notebook.widgets.d3._\nval script2 = {\n  //implicit val sss = new Codec[JDouble, String] {\n  //  def encode(x:JDouble):String = \"a\"*x.extract[Double].toInt\n  //  def decode(x:String):JDouble = JDouble(x.size)\n  //}\n  //D3.linePlot(Seq(\"ok\", \"nok\"), 400, 100)\n  //implicit val sss = jdouble2jvalueCodec()\n   D3.linePlot(ts, 400, 100)\n}",
      "language":"scala",
      "collapsed":false,
      "prompt_number":4,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"script2(ts)",
      "language":"scala",
      "collapsed":false,
      "prompt_number":5,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"",
      "language":"scala",
      "collapsed":true,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"",
      "language":"scala",
      "collapsed":true,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"// Simple expressions\nList(1,2,3).reverse // show\n ",
      "language":"scala",
      "collapsed":false,
      "prompt_number":2,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"sparkContext",
      "language":"scala",
      "collapsed":false,
      "prompt_number":3,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"val file = sparkContext.textFile(\"hdfs://ec2-54-77-215-229.eu-west-1.compute.amazonaws.com:9000/data/yum.log\")",
      "language":"scala",
      "collapsed":false,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"val rdd = sparkContext.makeRDD(Array(1, 2))",
      "language":"scala",
      "collapsed":false,
      "prompt_number":4,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"rdd.count()\n ",
      "language":"scala",
      "collapsed":false,
      "prompt_number":5,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"case class A(a:String)\nval a:A  = A(\"ok\")",
      "language":"scala",
      "collapsed":false,
      "prompt_number":6,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"val signs = sparkContext.makeRDD(Array(\">\", \"<\"))\nval appendedSigns = signs.map(_ + a.a)\n\n  <div>{appendedSigns.collect() map (s => <p>{s}</p>)}</div>\n  ",
      "language":"scala",
      "collapsed":false,
      "prompt_number":11,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"// Reactive components allow dynamic communication to Scala and Javascript\nval ib = new InputBox(\"\")",
      "language":"scala",
      "collapsed":false,
      "prompt_number":1,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"val ib2 = new InputBox(\"\")",
      "language":"scala",
      "collapsed":false,
      "prompt_number":2,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"// After running this, type text in the second box and it appears in the first\nib.currentValue <-- ib2.currentValue",
      "language":"scala",
      "collapsed":false,
      "prompt_number":5,
      "outputs":[]
    },{
      "cell_type":"code",
      "input":"",
      "language":"scala",
      "collapsed":true,
      "outputs":[]
    }]
  }],
  "nbformat":3
}